rnorm(10,170,sqrt(16.2))
set.seed(1)
rnorm(10,170,sqrt(16.2))
#HQTT cua Y theo X lm(Y~X,data) ket qua tom tat summary(lm(Y~X,data))
#BT mo hinh dung Y = 3 + 2X
# sinh ra 100 bo (X,Y) theo cach sau
# 1. lay 100 gtri cua X tu pp chuan N(1,1): set.seed(1)
#2. lay 100 gtri sai so tu e tu pp chuan  N(0:0.04) set.seed(2)
#3. tao 100 gtri cua Y tu mo hinh dung cong them e: Y = 3 + 2X +e
#tu 100 bo du lieu (X,Y) dc tao, hay uoc luong mo hinh Y = a_0 + a_1*x + e
# Dua ra cac gtri uoc luong cua he so a_0,a_1 kiem dinh a_0,a_1
# kiem dinh phan du : phan du co tuan theo pp chuan voi GTTB bang 0 k shapiro.test(e) kdinh pp chuan H0: e tuan theo pp chuan
# cach 2 kiem dinh pp chuan   ks.test(e,pnorm)
# Neu e tuan theo pp chuan thi de kd xem gttb co bang 0 k thi dung t.test(e)
# neu e k tuan theo pp chuan thi wilcox.test(e)
# ve do thi tan xa (X,y) ve them duong thang hoi quy Y = a_0 + a_1 * X
set.seed(1)
x=rnorm(100,1,1)
x
set.seed(2)
e = rnorm(100,0,sqrt(0.04))
e
y= 3 + 2*x + e
y
ul=lm(y~x)
summary(ul)
ul$coefficients
ul$model
ul$residuals
# H0 a_0 =0 >< H1 a_0 != 0
# p_value < 0,.05 -> bac bo H0 -> a_0 thuc su khac 0
## tuong tu a_1 trong summary
## kiem dinh phan du
## H0 phan du tuan theo pp chuan >< H1 phan du
shapiro.test(ul$residuals)
data(iris)
set.seed(1)
set.seed(1)
# use 70 % dataset as tranning set and remain 30 % as testing set
sample= sample(c(TRUE,FALSE),nrow(iris),replace=TRUE,prob = c(0.7,0.3))
sample
table(sample)
train = iris[sample,]
dim(train)
test =  iris[!sample,]
train=cars[data_car,]
### Chia bộ dữ liệu cars thành hai bộ dữ liệu con:training(65%) và testing(35%)
data_car=sample(c(TRUE,FALSE),50,replace= TRUE,prob=c(0.65,0.35))
train=cars[data_car,]
testing = cars[!data_car,]
### Phân tích hồi quy tuyến tính của biến dist theo speed trên bộ dữ liệu training.
ul = lm(dist ~ speed,data = train)
summary(ul)
train
e = residuals(train)
a_0 = -16.6093
a_1 = 3.8433
# dua ra cac gtri ul a_0, a-1
confint(a_0,a_1)
data(iris)
set.seed(1)
sample <- sample(c(TRUE, FALSE), nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
train <- iris[sample, ]
test <- iris[!sample, ]
lm.fit = lm(Sepal.Length ~ Petal.Length, train)
summary(lm.fit)
train
e_iris = lm.fit$residuals
shapiro.test(e_iris)
t.test(e_iris)
predicted <- c(1, 0, 1, 1, 0)
predicted
actual <- c(1, 1, 1, 0, 0)
predicted == 1
# Tính độ nhạy
sensitivity <- sum(predicted == 1 & actual == 1) / sum(actual == 1)
sensitivity
# Tính độ đặc hiệu
specificity <- sum(predicted == 0 & actual == 0) / sum(actual == 0)
specificity
# Tính độ chính xác
accuracy <- sum(predicted == actual) / length(actual)
cat("Accuracy:", accuracy, "\n")
predicted == 1 & actual == 1
sum(predicted == 1 & actual == 1)
# Dữ liệu mô phỏng:
predicted <- c(1, 0, 1, 1, 0)  # Dự đoán của mô hình (1: positive, 0: negative)
actual <- c(1, 1, 1, 0, 0)      # Nhãn thực tế
# Tính TSS (Total Sum of Squares)
TSS <- sum((actual - mean(actual))^2)
# Tính RSS (Residual Sum of Squares)
RSS <- sum((predicted - actual)^2)
# Tính độ chính xác
accuracy <- sum(predicted == actual) / length(actual)
# Tính độ nhạy
sensitivity <- sum(predicted == 1 & actual == 1) / sum(actual == 1)
# Tính độ đặc hiệu
specificity <- sum(predicted == 0 & actual == 0) / sum(actual == 0)
# In kết quả
cat("TSS:", TSS, "\n")
cat("Accuracy:", accuracy, "\n")
cat("Sensitivity:", sensitivity, "\n")
cat("Specificity:", specificity, "\n")
cat("RSS:", RSS, "\n")
# Nạp thư viện cần thiết
library(caret)
# Nạp thư viện cần thiết
install.packages("caret")
# Nạp thư viện cần thiết
# install.packages("caret")
library(caret)
# Tạo dữ liệu mẫu
set.seed(123)
data(iris)
# Thiết lập K-Fold Cross-Validation với k = 5
train_control <- trainControl(method="cv", number=5)
# Huấn luyện mô hình cây quyết định với kiểm chứng chéo
model <- train(Species ~ ., data=iris, method="rpart", trControl=train_control)
# Hiển thị kết quả
print(model)
# Dự đoán và tính toán hiệu suất
predictions <- predict(model, newdata=iris)
confusionMatrix(predictions, iris$Species)
# Nạp thư viện cần thiết
# install.packages("caret")
library(caret)
# Tạo dữ liệu mẫu
set.seed(123)
data(iris)
# Thiết lập K-Fold Cross-Validation với k = 5
train_control <- trainControl(method="cv", number=5)
# Huấn luyện mô hình cây quyết định với kiểm chứng chéo
model <- train(Species ~ ., data=iris, method="rpart", trControl=train_control)
# Hiển thị kết quả
print(model)
# Dự đoán và tính toán hiệu suất
predictions <- predict(model, newdata=iris)
confusionMatrix(predictions, iris$Species)
# Tạo dữ liệu mẫu
set.seed(123)
data(iris)
# Thiết lập K-Fold Cross-Validation với k = 5
train_control <- trainControl(method="cv", number=5)
# Huấn luyện mô hình cây quyết định với kiểm chứng chéo
model <- train(Species ~ ., data=iris, method="rpart", trControl=train_control)
# Hiển thị kết quả
print(model)
